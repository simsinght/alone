{"version":3,"sources":["Components/Map/red-dot-n.png","Components/Map/red-dot-ne.png","Components/Map/red-dot-nw.png","Components/Map/red-dot-s.png","Components/Map/red-dot-se.png","Components/Map/red-dot-sw.png","Components/Map/red-dot-e.png","Components/Map/red-dot-w.png","title.png","border.png","redux/reducers/GMap.js","redux/reducers/index.js","redux/actionsTypes.js","redux/sagas/GMap.js","redux/store.js","Components/Map/GMap.js","redux/actions.js","Components/Map/index.js","Components/LeftColumn/LeftColumn.js","Components/LeftColumn/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","polling","positions","day","hour","count","combineReducers","GMap","state","action","type","payload","pollHours","rootSaga","map","llat","llong","lat","lng","name","i","j","k","numToDay","0","1","2","3","4","5","6","timeToHour","data","length","split","put","out","slice","delay","all","call","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","sagas","dirs","redDotN","redDotNE","redDotNW","redDotS","redDotSE","redDotSW","redDotE","redDotW","showingInfoWindow","activeMarker","selectedPlace","selectedPed","onMarkerClick","props","marker","e","ped","setState","onClose","console","log","createMarker","lname","llng","dir","position","onClick","icon","url","scaledSize","width","height","anchor","x","y","key","createMarkers","markers","push","google","this","zoom","initialCenter","visible","time","Button","color","Component","GoogleApiWrapper","apiKey","iter","connect","dispatch","getPositions","pollPositions","LeftColumn","Grid","Column","style","paddingRight","verticalAlign","centered","Image","src","title","Header","textAlign","marginBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fdfd637.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red-dot-n.2d2501fc.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-ne.e9ccb056.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-nw.3ad1de2f.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-s.9109295a.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-se.64bb45ff.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-sw.cb8a09d1.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-e.af94bbad.png\";","module.exports = __webpack_public_path__ + \"static/media/red-dot-w.f623980d.png\";","module.exports = __webpack_public_path__ + \"static/media/title.3adb37ac.png\";","module.exports = __webpack_public_path__ + \"static/media/border.d18ffbd1.png\";","import { GET_POSITIONS_SUCCESS, LEFT_SET_TIME } from \"../actionsTypes\";\n\nconst initialState = {\n  polling: false,\n  positions: [],\n  day: 'MONDAY',\n  hour: '9PM',\n  count: 0,\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case LEFT_SET_TIME:\n      return {\n        ...state,\n        day: action.payload.day,\n        hour: action.payload.hour,\n        count: action.payload.count\n      }\n    case GET_POSITIONS_SUCCESS:\n      return {\n        ...state,\n        positions: action.payload.positions\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport GMap from \"./GMap\";\n\nexport default combineReducers({ GMap });\n","export const GET_POSITIONS = \"GMAP_GET_POSITIONS\";\nexport const GET_POSITIONS_SUCCESS = \"GMAP_GET_POSITIONS\";\nexport const GET_POSITIONS_ERROR = \"GMAP_GET_POSITIONS\";\n\nexport const POLL_POSITIONS = \"GMAP_POLL_POSITIONS\";\n\nexport const LEFT_SET_TIME = \"LEFT_SET_TIME\"\n","import { all, call, delay, put, takeEvery, take } from 'redux-saga/effects';\nimport { GET_POSITIONS, GET_POSITIONS_SUCCESS, POLL_POSITIONS, LEFT_SET_TIME } from '../actionsTypes';\nimport axios from 'axios';\nimport data from './cleanData';\n\nlet points = [[32.71163629, -117.154756], [32.72084324, -117.1690626], [32.7097405, -117.1627473], [32.70130945, -117.0693071], [32.71978873, -117.1628183], [32.72576703, -117.1702165], [32.71163942, -117.1591283], [32.73150539, -117.1592884], [32.7115838, -117.1630017], [32.70793705, -117.1540471], [32.70931728, -117.1554569], [32.71632946, -117.1600229], [32.711879, -117.164817], [32.93620922, -117.2572871], [32.70948847, -117.1550563]];\nlet positions = points.map(([llat, llong]) => ({\n                              lat: llat,\n                              lng: llong,\n                              name: ' '+llat+llong\n                            }));\nlet positionz = [[{name: \"Aim's Marker\", lat: 32.717572, lng: -117.16564}],\n                 [{name: \"Jim's Marker\", lat: 32.717074, lng: -117.16564}],\n                 [{name: \"Kim's Marker\", lat: 32.716574, lng: -117.16564}],\n                 [{name: \"Lim's Marker\", lat: 32.716074, lng: -117.16564}],\n                 [{name: \"Nim's Marker\", lat: 32.715574, lng: -117.16564}],\n                 [{name: \"Pim's Marker\", lat: 32.715074, lng: -117.16564}],\n                 [{name: \"Sim's Marker\", lat: 32.714574, lng: -117.16564}],\n                 [{name: \"Tim's Marker\", lat: 32.714074, lng: -117.16564}],\n                 [{name: \"Vim's Marker\", lat: 32.713574, lng: -117.16564}],\n                 [{name: \"Zim's Marker\", lat: 32.713074, lng: -117.16564}]];\n\nexport function* pollPositionsWalker() {\n  let i = 0;\n  let j = 3;\n  while (true) {\n    const response  = yield call(\n      axios.get,\n      `http://localhost:5000/${i}/${j}`,\n      { 'headers': { 'Access-Control-Allow-Origin': '*', } }\n    );\n    console.log(i, response.data);\n\n    yield put({type: GET_POSITIONS_SUCCESS, payload: {positions: response.data}});\n    yield delay(5000);\n    i = i + j;\n  }\n}\n\nexport function* pollPositions() {\n  let i = 0;\n  i = i % positions.length;\n  yield put({type: GET_POSITIONS_SUCCESS, payload: {positions}});\n  yield delay(3000);\n  i = i + 1;\n}\n\nexport function* pollHours() {\n\n  let i=0, j=0, k=0;\n  let numToDay = {0:'MONDAY',1:'TUESDAY',2:'WEDNESDAY',\n                  3:'THURSDAY',4:'FRIDAY',5:'SATURDAY',6:'SUNDAY'}\n  let shortToLong = {'Mon':'MONDAY','Tue':'TUESDAY','Wed':'WEDNESDAY',\n               'Thu':'THURSDAY','Fri':'FRIDAY','Sat':'SATURDAY','Sun':'SUNDAY'}\n  let timeToHour = {'00': '12-1AM',\n                    '01': '1-2AM',\n                    '02': '2-3AM',\n                    '03': '3-4AM',\n                    '04': '4-5AM',\n                    '05': '5-6AM',\n                    '20': '8-9PM',\n                    '21': '9-10PM',\n                    '22': '10-11AM',\n                    '23': '11-12AM',\n                  }\n\n  for (i=0; i<data.length; i++) {\n    for (j=0; j<data[i].length; j++) {\n      let count = data[i][j].length\n      let hour = timeToHour[data[i][j][0]['time'][3].split(':')[0]]\n      yield put({ type: LEFT_SET_TIME,\n                  payload: {day: numToDay[i], hour, count} })\n      // 'name''lat''lng''dir'\n      for (k=0;k<1;k++) {\n        let out = data[i][j].slice(k, k+8)\n        yield put({type: GET_POSITIONS_SUCCESS, payload: {positions: out}});\n        yield delay(3000);\n      }\n    }\n  }\n}\n\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield all([\n    // call(pollPositions),\n    // call(pollPositionsWalker),\n    call(pollHours),\n\n  ])\n}\n\n/*\nexport function* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync);\n}\n\nexport function* getPositions(action) {\n  yield delay(1000);\n  yield put({type: GET_POSITIONS_SUCCESS, positions: positions[action.payload.iter]});\n}\n\nexport function* getPositionsAsync() {\n  yield takeEvery(GET_POSITIONS, getPositions);\n}\n\nexport function* pollPositionsAsync() {\n  yield take(POLL_POSITIONS, getPositions);\n}\n*/\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport createSagaMiddleware from 'redux-saga';\nimport sagas from './sagas/GMap';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(sagas);\n\nexport default store;\n","import React, { Component } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\nimport {Button} from 'semantic-ui-react';\nimport redDotN from './red-dot-n.png'\nimport redDotNE from './red-dot-ne.png'\nimport redDotNW from './red-dot-nw.png'\nimport redDotS from './red-dot-s.png'\nimport redDotSE from './red-dot-se.png'\nimport redDotSW from './red-dot-sw.png'\nimport redDotE from './red-dot-e.png'\nimport redDotW from './red-dot-w.png'\n\nclass GMap extends Component {\n\n  dirs = {\n    'n': redDotN,\n    'ne': redDotNE,\n    'nw': redDotNW,\n    's': redDotS,\n    'se': redDotSE,\n    'sw': redDotSW,\n    'e': redDotE,\n    'w': redDotW\n  }\n\n  state = {\n    showingInfoWindow: false, // Hides or the shows the infoWindow\n    activeMarker: {},         // Shows the active marker upon click\n    selectedPlace: {},        // Shows the infoWindow to the selected place upon a marker\n    selectedPed: {}\n  };\n\n  //componentDidMount = () => {\n  //  let { polling } = this.props;\n  //  if (!polling) {\n  //    this.props.pollPositions();\n  //  }\n  //}\n\n  onMarkerClick = (props, marker, e, ped) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n      selectedPed: ped\n  });\n\n  onClose = props => {\n    console.log(this.state.activeMarker);\n    console.log(this.state.selectedPlace);\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  createMarker = (lname, llat, llng, dir, position) => {\n    return (\n      <Marker\n        onClick={(props, marker, e) => this.onMarkerClick(props, marker, e, position)}\n        icon={{\n          url: this.dirs[dir],\n          scaledSize: {width: 80, height: 80},\n          anchor: {x: 40, y: 40}\n        }}\n        name={lname}\n        key={lname}\n        position={{\n          lat: llat,\n          lng: llng\n        }}\n      />\n    );\n  }\n\n  createMarkers = (positions) => {\n    let markers = [];\n    //let positions = [{name: \"Sim's Marker\", lat: 32.717572, lng: -117.16662},\n    //                 {name: \"Jim's Marker\", lat: 32.713574, lng: -117.16564}];\n    for (const position of positions) {\n      markers.push(this.createMarker(position.name, position.lat, position.lng, position.dir, position));\n    }\n\n    return markers;\n  }\n\n/*\ndefaultOptions={{\n  disableDefaultUI: true, // disable default map UI\n  draggable: true, // make map draggable\n  keyboardShortcuts: false, // disable keyboard shortcuts\n  scaleControl: true, // allow scale controle\n  scrollwheel: true, // allow scroll wheel\n  styles: this.styles // change default map styles\n}}\n*/\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        initialCenter={{\n          lat: 32.717572,\n          lng: -117.16662\n        }}\n      >\n        {this.createMarkers(this.props.positions)}\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <h4>ID: {this.state.selectedPlace.name}</h4>\n          <p>\n            A person was recently spotted here\n            {this.state.selectedPed.time ? ' at '+this.state.selectedPed.time[3] : ''}\n          </p>\n          <Button color='red'>Get Directions</Button>\n          <Button color='blue'>Call Dibs (PRO)</Button>\n        </InfoWindow>\n      </Map>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDSbG1MQEsStL9XflSr-NVuhwzE3ibsDyI'\n})(GMap);\n","import { GET_POSITIONS,\n         GET_POSITIONS_SUCCESS,\n         POLL_POSITIONS,\n         LEFT_SET_TIME } from \"./actionsTypes\";\n\nlet iter = 0;\n\nexport const getPositions = () => ({\n  type: GET_POSITIONS,\n  payload: {\n    iter: ++iter\n  }\n})\n\nexport const getPositionsSuccess = (markers) => ({\n  type: GET_POSITIONS_SUCCESS,\n  payload: {\n    markers\n  }\n})\n\nexport const pollPositions = () => ({\n  type: POLL_POSITIONS,\n  payload: {}\n})\n\nexport const setTime = (time) => ({\n  type: LEFT_SET_TIME,\n  payload: time\n})\n","import { connect } from \"react-redux\";\nimport GMap from \"./GMap\";\nimport { getPositions, pollPositions } from \"../../redux/actions\";\n\nconst mapStateToProps = state => {\n  const { GMap } = state;\n  const positions = GMap.positions;\n  const polling = GMap.polling;\n  return { positions, polling };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getPositions: () => dispatch(getPositions()),\n  pollPositions: () => dispatch(pollPositions()),\n})\n\n// export default TodoList;\nexport default connect(mapStateToProps, mapDispatchToProps)(GMap);\n","import React, { Component } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\nimport {Grid, Image, Header} from 'semantic-ui-react';\nimport title from '../../title.png';\n\nclass LeftColumn extends Component {\n\n  render() {\n    return (\n      <Grid.Column style={{paddingRight: 0}} verticalAlign={'middle'} centered width={4}>\n        {/*<Header style={{'fontSize': 'calc(24px + (26 - 14) * ((100vw - 300px) / (1600 - 300)))'}}\n                textAlign=\"center\"\n                inverted\n        >\n          <span style={{'color': 'white'}}>SOME</span>\n          <span style={{'color': 'red'}}>ONE </span>\n          <span style={{'color': 'white'}}>WALKS HOME ALONE AT NIGHT</span>\n        </Header>*/}\n        <Image src={title}/>\n        <p style={{'color': 'white', 'textAlign': 'center'}}>\n          <i>a different kind of 9 to 5</i>\n        </p>\n        <Header textAlign='center' style={{marginBottom: 0}}>\n          <span style={{'color': 'white'}}>{this.props.day} </span>\n          <span style={{'color': 'red'}}>{this.props.hour}</span>\n        </Header>\n        <p style={{'color': 'white', 'textAlign': 'center'}}>\n          total count: {this.props.count}\n        </p>\n      </Grid.Column>\n    )\n  }\n}\n\nexport default LeftColumn;\n","import { connect } from \"react-redux\";\nimport LeftColumn from \"./LeftColumn\";\n// import { getPositions, pollPositions } from \"../../redux/actions\";\n\nconst mapStateToProps = state => {\n  const { GMap } = state;\n  const day = GMap.day;\n  const hour = GMap.hour;\n  const count = GMap.count;\n  return { day, hour, count };\n};\n\nconst mapDispatchToProps = dispatch => ({\n})\n\n// export default TodoList;\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftColumn);\n","import React from 'react';\nimport GMap from './Components/Map';\nimport LeftColumn from './Components/LeftColumn'\nimport {Grid, Image, Header} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport border from './border.png';\n\nfunction App() {\n  return (\n    <Grid centered style={{height: '100vh', 'backgroundColor': 'black'}}>\n      <LeftColumn/>\n      <Grid.Column width={12}>\n        {/*<Image src={border} floated='left' style={{'z-index': '100000000', 'height': '95vh'}}/>*/}\n        <GMap/>\n      </Grid.Column>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}> <App style={{'backgroundColor': 'black'}}/> </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}